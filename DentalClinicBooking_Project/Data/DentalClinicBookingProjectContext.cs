// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using DentalClinicBooking_Project.Models.Domain;
using Microsoft.EntityFrameworkCore;

namespace DentalClinicBooking_Project.Data;

public partial class DentalClinicBookingProjectContext : DbContext
{
    public DentalClinicBookingProjectContext()
    {
    }

    public DentalClinicBookingProjectContext(DbContextOptions<DentalClinicBookingProjectContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Admin> Admins { get; set; }

    public virtual DbSet<Basic> Basics { get; set; }

    public virtual DbSet<Clinic> Clinics { get; set; }

    public virtual DbSet<ClinicAppointmentSchedule> ClinicAppointmentSchedules { get; set; }

    public virtual DbSet<ClinicImage> ClinicImages { get; set; }

    public virtual DbSet<Dentist> Dentists { get; set; }

    public virtual DbSet<Owner> Owners { get; set; }

    public virtual DbSet<Patient> Patients { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<Slot> Slots { get; set; }

    public virtual DbSet<SlotOfClinic> SlotOfClinics { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer("Server=DESKTOP-20AJ10N\\SQLEXPRESS;uid=sa;pwd=12345;database= DentalCLinicBookingProjectTest;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("PK__Account__349DA586DDA3460A");

            entity.ToTable("Account");

            entity.Property(e => e.AccountId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("AccountID");
            entity.Property(e => e.Gmail)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Admin>(entity =>
        {
            entity.HasKey(e => e.AdminId).HasName("PK__Admin__719FE4E8370287EB");

            entity.ToTable("Admin");

            entity.HasIndex(e => e.AccountId, "UQ__Admin__349DA587FA92B9D8").IsUnique();

            entity.Property(e => e.AdminId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("AdminID");
            entity.Property(e => e.AccountId).HasColumnName("AccountID");

            entity.HasOne(d => d.Account).WithOne(p => p.Admin)
                .HasForeignKey<Admin>(d => d.AccountId)
                .HasConstraintName("FK__Admin__AccountID__5CD6CB2B");
        });

        modelBuilder.Entity<Basic>(entity =>
        {
            entity.HasKey(e => e.BasicId).HasName("PK__Basic__BABA01D17924A19A");

            entity.ToTable("Basic");

            entity.Property(e => e.BasicId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("BasicID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.BasicName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ClinicId).HasColumnName("CLinicID");
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(11)
                .IsUnicode(false);

            entity.HasOne(d => d.Clinic).WithMany(p => p.Basics)
                .HasForeignKey(d => d.ClinicId)
                .HasConstraintName("FK__Basic__CLinicID__5DCAEF64");
        });

        modelBuilder.Entity<Clinic>(entity =>
        {
            entity.HasKey(e => e.ClinicId).HasName("PK__Clinic__3347C2FD744C392E");

            entity.ToTable("Clinic");

            entity.Property(e => e.ClinicId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ClinicID");
            entity.Property(e => e.ClinicName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("CLinicName");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.MainImage)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");

            entity.HasOne(d => d.Owner).WithMany(p => p.Clinics)
                .HasForeignKey(d => d.OwnerId)
                .HasConstraintName("FK__Clinic__OwnerID__5EBF139D");
        });

        modelBuilder.Entity<ClinicAppointmentSchedule>(entity =>
        {
            entity.HasKey(e => e.ClinicAppointmentScheduleId).HasName("PK__CLinicAp__E5FDDBE0DD2C7B8F");

            entity.ToTable("CLinicAppointmentSchedule");

            entity.Property(e => e.ClinicAppointmentScheduleId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CLinicAppointmentScheduleID");
            entity.Property(e => e.BasicId).HasColumnName("BasicID");
            entity.Property(e => e.ClinicId).HasColumnName("ClinicID");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PatientId).HasColumnName("PatientID");
            entity.Property(e => e.ServiceId).HasColumnName("ServiceID");
            entity.Property(e => e.SlotId).HasColumnName("SlotID");
            entity.Property(e => e.Type).HasMaxLength(50);

            entity.HasOne(d => d.Basic).WithMany(p => p.ClinicAppointmentSchedules)
                .HasForeignKey(d => d.BasicId)
                .HasConstraintName("FK__CLinicApp__Basic__71D1E811");

            entity.HasOne(d => d.Clinic).WithMany(p => p.ClinicAppointmentSchedules)
                .HasForeignKey(d => d.ClinicId)
                .HasConstraintName("FK__CLinicApp__Clini__72C60C4A");

            entity.HasOne(d => d.Patient).WithMany(p => p.ClinicAppointmentSchedules)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK__CLinicApp__Patie__73BA3083");

            entity.HasOne(d => d.Service).WithMany(p => p.ClinicAppointmentSchedules)
                .HasForeignKey(d => d.ServiceId)
                .HasConstraintName("FK__CLinicApp__Servi__74AE54BC");

            entity.HasOne(d => d.Slot).WithMany(p => p.ClinicAppointmentSchedules)
                .HasForeignKey(d => d.SlotId)
                .HasConstraintName("FK__CLinicApp__SlotI__75A278F5");
        });

        modelBuilder.Entity<ClinicImage>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK__ClinicIm__7516F4EC37B78281");

            entity.ToTable("ClinicImage");

            entity.Property(e => e.ImageId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ImageID");
            entity.Property(e => e.ClinicId).HasColumnName("ClinicID");
            entity.Property(e => e.Image)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Clinic).WithMany(p => p.ClinicImages)
                .HasForeignKey(d => d.ClinicId)
                .HasConstraintName("FK__ClinicIma__Clini__6477ECF3");
        });

        modelBuilder.Entity<Dentist>(entity =>
        {
            entity.HasKey(e => e.DentistId).HasName("PK__Dentist__9157336F57D5C980");

            entity.ToTable("Dentist");

            entity.HasIndex(e => e.AccountId, "UQ__Dentist__349DA5873F8487DA").IsUnique();

            entity.Property(e => e.DentistId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("DentistID");
            entity.Property(e => e.AccountId).HasColumnName("AccountID");
            entity.Property(e => e.BasicId).HasColumnName("BasicID");
            entity.Property(e => e.DentistName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Experience)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Image)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Account).WithOne(p => p.Dentist)
                .HasForeignKey<Dentist>(d => d.AccountId)
                .HasConstraintName("FK__Dentist__Account__656C112C");

            entity.HasOne(d => d.Basic).WithMany(p => p.Dentists)
                .HasForeignKey(d => d.BasicId)
                .HasConstraintName("FK__Dentist__BasicID__66603565");
        });

        modelBuilder.Entity<Owner>(entity =>
        {
            entity.HasKey(e => e.OwnerId).HasName("PK__Owner__8193859865E3FEDE");

            entity.ToTable("Owner");

            entity.HasIndex(e => e.AccountId, "UQ__Owner__349DA587391202D1").IsUnique();

            entity.Property(e => e.OwnerId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("OwnerID");
            entity.Property(e => e.AccountId).HasColumnName("AccountID");
            entity.Property(e => e.Experience).IsRequired();
            entity.Property(e => e.Image)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.OwnerName)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Account).WithOne(p => p.Owner)
                .HasForeignKey<Owner>(d => d.AccountId)
                .HasConstraintName("FK__Owner__AccountID__6754599E");
        });

        modelBuilder.Entity<Patient>(entity =>
        {
            entity.HasKey(e => e.PatientId).HasName("PK__Patient__970EC34621556549");

            entity.ToTable("Patient");

            entity.HasIndex(e => e.AccountId, "UQ__Patient__349DA587B010A916").IsUnique();

            entity.Property(e => e.PatientId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("PatientID");
            entity.Property(e => e.AccountId).HasColumnName("AccountID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.CitizenIdentificationCard)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.HealthInsuranceCardCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Job).HasMaxLength(50);
            entity.Property(e => e.Nation).HasMaxLength(20);
            entity.Property(e => e.PatientName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(11)
                .IsUnicode(false);

            entity.HasOne(d => d.Account).WithOne(p => p.Patient)
                .HasForeignKey<Patient>(d => d.AccountId)
                .HasConstraintName("FK__Patient__Account__68487DD7");
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.HasKey(e => e.ServiceId).HasName("PK__Service__C51BB0EA4E20039B");

            entity.ToTable("Service");

            entity.Property(e => e.ServiceId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ServiceID");
            entity.Property(e => e.ServiceName)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasMany(d => d.Clinics).WithMany(p => p.Services)
                .UsingEntity<Dictionary<string, object>>(
                    "ServiceOfClinic",
                    r => r.HasOne<Clinic>().WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__ServiceOf__Clini__693CA210"),
                    l => l.HasOne<Service>().WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__ServiceOf__Servi__6A30C649"),
                    j =>
                    {
                        j.HasKey("ServiceId", "ClinicId").HasName("PK__ServiceO__062FCCC5DABAFBCE");
                        j.ToTable("ServiceOfClinic");
                        j.IndexerProperty<Guid>("ServiceId").HasColumnName("ServiceID");
                        j.IndexerProperty<Guid>("ClinicId").HasColumnName("ClinicID");
                    });
        });

        modelBuilder.Entity<Slot>(entity =>
        {
            entity.HasKey(e => e.SlotId).HasName("PK__Slot__0A124A4F5114BB6B");

            entity.ToTable("Slot");

            entity.Property(e => e.SlotId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("SlotID");
            entity.Property(e => e.SlotName)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<SlotOfClinic>(entity =>
        {
            entity.HasKey(e => new { e.SlotId, e.ClinicId }).HasName("PK__SlotOfCl__C926366038D1462D");

            entity.ToTable("SlotOfClinic");

            entity.Property(e => e.SlotId).HasColumnName("SlotID");
            entity.Property(e => e.ClinicId).HasColumnName("ClinicID");

            entity.HasOne(d => d.Clinic).WithMany(p => p.SlotOfClinics)
                .HasForeignKey(d => d.ClinicId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SlotOfCli__Clini__6B24EA82");

            entity.HasOne(d => d.Slot).WithMany(p => p.SlotOfClinics)
                .HasForeignKey(d => d.SlotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SlotOfCli__SlotI__6C190EBB");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}